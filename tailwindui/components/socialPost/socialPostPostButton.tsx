'use client';

import React, { useState, useEffect, useRef } from 'react';
import { BigGrayButton } from '../button/DrlambdaButton';
import { getImageDataUrl } from '../utils/DownloadImage';
import SocialPostSlide from '@/models/SocialPost';
import SocialPostContainer from '@/components/socialPost/socialPostContainer';
import { templateDispatch } from '@/components/socialPost/socialPostTemplateDispatch';
import SessionStorage from '@/utils/SessionStorage';

type SocialPostPostButtonProps = {
	socialPostSlides: SocialPostSlide[];
};

const SocialPostPostButton: React.FC<SocialPostPostButtonProps> = ({
	socialPostSlides,
}) => {
	const res_scenario = SessionStorage.getItem('scenarioType');
	const [isProcessing, setIsProcessing] = useState(false);
	const [slideRef, setSlideRef] = useState(React.createRef<HTMLDivElement>());
	const [slideIndex, setSlideIndex] = useState(0);

	const uploadToImgbb = async (
		imageDataUrl: string,
	): Promise<string | null> => {
		// Extract the Base64 string from the data URL
		const base64Image = imageDataUrl.split(';base64,').pop();

		if (!base64Image) {
			console.error('Failed to extract base64 image data');
			return null;
		}

		const formData = new FormData();
		formData.append('image', base64Image);

		try {
			const response = await fetch(
				'https://api.imgbb.com/1/upload?key=1e7d9032fb1608a28fd6e4342f37b7f5',
				{
					method: 'POST',
					body: formData,
				},
			);
			const data = await response.json();
			return data.data.url;
		} catch (error) {
			console.error('Error uploading image:', error);
			return null;
		}
	};
	const handlePostToTwitter = async () => {
		setIsProcessing(true);
		const urlArray: string[] = [];

		for (let i = 0; i < socialPostSlides.length; i++) {
			setSlideIndex(i);
			await new Promise((resolve) => setTimeout(resolve, 100));

			// Temporarily render the slide to convert it into an image
			// You might need to adjust this part to ensure the slide is rendered and captured correctly
			const imageDataUrl = await getImageDataUrl(slideRef);

			if (imageDataUrl) {
				const publicImageUrl = await uploadToImgbb(imageDataUrl);
				if (publicImageUrl) {
					urlArray.push(publicImageUrl);
				}
			} else {
				console.error('Unable to generate image URL for a slide');
			}
		}

		const twitterText = 'test socialpost generated by Drlambda';
		const twitterUrls = urlArray.map((url) => `\n${url}`).join('');
		const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(twitterText)}${encodeURIComponent(twitterUrls)}`;

		window.open(twitterUrl, '_blank');
		setIsProcessing(false);
	};

	return (
		<div>
			<BigGrayButton onClick={handlePostToTwitter} isSubmitting={isProcessing}>
				Share on X
			</BigGrayButton>

			{/* hidden div for export to pdf */}
			<div className='absolute left-[-9999px] top-[-9999px] -z-1'>
				<div key={`exportToPdfContainer` + slideIndex.toString()}>
					<SocialPostContainer
						slide={socialPostSlides[slideIndex]}
						currentSlideIndex={slideIndex}
						exportToPdfMode={true}
						templateDispatch={templateDispatch}
						slideRef={slideRef}
						onSlideRefUpdate={setSlideRef}
					/>
				</div>
			</div>
		</div>
	);
};

export default SocialPostPostButton;
